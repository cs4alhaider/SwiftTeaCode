{
  "description" : "",
  "name" : "MySwiftUI",
  "expanders" : [
    {
      "name" : "Table View",
      "is_enabled" : true,
      "description" : "Create a table view \n\n> table tableView",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "table ${name:word}",
      "output_template" : "fileprivate lazy var ${name}: UITableView = {\n        let table = UITableView()\n        table.delegate = self\n        table.dataSource = self\n        table.separatorStyle = .none#\n        table.register(<#TableViewCell#>.self, forCellReuseIdentifier: self.<#cellID#>)\n        table.translatesAutoresizingMaskIntoConstraints = false\n        return table\n    }()\n    ",
      "identifier" : ""
    },
    {
      "name" : "view",
      "is_enabled" : true,
      "description" : "Creating view \n\n> - view borderLine",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "view ${name:word}",
      "output_template" : "fileprivate lazy var ${name}View: UIView = {\n        let view = UIView()\n        view.backgroundColor = #<#color#>\n        view.alpha = <#Int#>\n        view.layer.cornerRadius = <#Int#>\n        view.translatesAutoresizingMaskIntoConstraints = false\n        return view\n    }()",
      "identifier" : ""
    },
    {
      "name" : "Label",
      "is_enabled" : true,
      "description" : "Create Label \n\n> - label title",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "label ${name:word}",
      "output_template" : "fileprivate lazy var ${name}Label: UILabel = {\n        let label = UILabel()#\n        label.text = <#String#>\n        label.textColor = <#Color#>\n        label.textAlignment = NSTextAlignment.<#center#>\n        label.font = UIFont.systemFont(ofSize: <#Int#>)\n        label.numberOfLines = <#Int#>\n        label.adjustsFontSizeToFitWidth = true\n        \/\/label.sizeToFit()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()",
      "identifier" : ""
    },
    {
      "name" : "Button",
      "is_enabled" : true,
      "description" : "Creating button with action\n\n> - button open",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "button ${name:word}",
      "output_template" : "fileprivate lazy var ${name}Button: UIButton = {\n        let buttton = UIButton()#\n        buttton.setTitle(<#String#>, for: .normal)\n        buttton.titleLabel?.font = UIFont.systemFont(ofSize: <#Int#>)\n        buttton.setTitleColor(<#titleColor#>, for: .normal)\n        buttton.backgroundColor = <#backgroundColor#>\n        buttton.layer.cornerRadius = <#Int#>\n        buttton.translatesAutoresizingMaskIntoConstraints = false\n        buttton.addTarget(self, action: #selector(${name}ButtonAction(_:)), for: .touchUpInside)\n        return buttton\n    }()\n    \n    @objc fileprivate func ${name}ButtonAction(_ sender: UIButton) {\n        <#Code#>\n    }",
      "identifier" : ""
    },
    {
      "name" : "StackView",
      "is_enabled" : true,
      "description" : "Creating a Stack view\n\n> - stack v",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "stack ${name:word}",
      "output_template" : "fileprivate lazy var ${name}StackView: UIStackView = {\n        let stack = UIStackView()#\n        stack.distribution = UIStackViewDistribution.<#distribution#>\n        stack.axis = <#.vertical or .horizontal#>\n        stack.spacing = <#Int#>\n        stack.alpha = 1\n        stack.translatesAutoresizingMaskIntoConstraints = false\n        return stack\n    }()",
      "identifier" : ""
    },
    {
      "name" : "Text Field",
      "is_enabled" : true,
      "description" : "Creating a text field\n\n> - textField name",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "textField ${name:word}",
      "output_template" : "fileprivate lazy var ${name}TextField: UITextField = {\n        let textField = UITextField()#\n        textField.delegate = self\n        \/\/textField.text = \"${name}TextField\"\n        textField.textColor = .black\n        textField.textAlignment = .natural\n        textField.borderStyle = .none\n        textField.placeholder = \"${name}TextField placeholder\"\n        textField.font = UIFont.systemFont(ofSize: <#Int#>)\n        textField.minimumFontSize = <#Int#>\n        textField.layer.cornerRadius = <#Int#>\n        textField.backgroundColor = <#UIColor#>\n        textField.clearButtonMode = .always\n        textField.adjustsFontSizeToFitWidth = true\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        return textField\n    }()",
      "identifier" : ""
    },
    {
      "name" : "Text View",
      "is_enabled" : true,
      "description" : "Ceating a text view\n\n> - textView story",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "textView ${name:word}",
      "output_template" : "fileprivate lazy var ${name}TextView: UITextView = { #\n        let textView = UITextView()\n        textView.delegate = self\n        \/\/textView.text = \"${name}TextView\"\n        textView.textColor = <#UIColor#>\n        textView.backgroundColor = <#UIColor#>\n        textView.textAlignment = .natural\n        textView.isEditable = true\n        textView.isSelectable = true\n        textView.font = UIFont.systemFont(ofSize: <#Int#>)\n        textView.layer.cornerRadius = <#Int#>\n        textView.translatesAutoresizingMaskIntoConstraints = false\n        return textView\n    }()",
      "identifier" : ""
    },
    {
      "name" : "Image view",
      "is_enabled" : true,
      "description" : "Creating UIImageView \n\n> - imageView logo",
      "supported_languages" : [
        "swift"
      ],
      "pattern" : "imageView ${name:word}",
      "output_template" : "fileprivate lazy var ${name}ImageView: UIImageView = { #\n        let image = UIImageView()\n        image.image = UIImage(named: <#String#>)\n        image.clipsToBounds = true\n        image.contentMode = <#.scaleAspectFill#>\n        image.layer.borderColor = <#UIColor.clear.cgColor#>\n        image.layer.borderWidth = <#0#>\n        image.layer.cornerRadius = <#Int#>\n        image.translatesAutoresizingMaskIntoConstraints = false\n        return image\n    }()",
      "identifier" : ""
    }
  ],
  "supported_languages" : [
    "any"
  ],
  "is_enabled" : true
}